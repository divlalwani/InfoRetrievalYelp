from __future__ import division
########################################################################################################################
# Author: Aravindh Varadharaju
#
# For Task II
#
# Code is used to generate Sentiment rating using TextBlob Sentiment Analyzer which internally used NaiveBayesAnalyzer
# to calculate the sentiment score.
#
# Input: Records from review2 collection
# Output: JSON files with records in the format: {"business_id": "KPoTixdjoJxSqRSEApSAGg", "stars": 5, "rating": 5}
#         where, "stars" is from the Yelp Dataset and "rating" is generated by TextBlob Sentiment Score
#
# Code runs in a loop and in each iteration calculates the sentiment for 1000 to 7000 records.
########################################################################################################################
from pymongo import MongoClient
from textblob import TextBlob
from textblob.sentiments import NaiveBayesAnalyzer
import json


class Business:
    def __init__(self, business_id, stars, score):
        self.business_id = business_id
        self.stars = stars
        self.rating = score


def get_reviews(count=None):
    """
    Function is used to get the sentiment score for the piece of text using NaiveBayesAnalyzer
    :param count: Number of records for which the score needs to calculated
    :return:
    """
    record_limit=count
    review_collection = MongoClient('localhost', 29017).yelp.review2
    review_cursor = review_collection.find().limit(record_limit).add_option(16)
    line = 0
    match_cnt = 0
    file_name = "CalculatedRatings_"+str(record_limit)+".json"
    ratings_file = open(file_name, 'w')
    for entry in review_cursor:
        business_id = entry["business_id"]
        text = entry["text"]
        stars = entry["stars"]
        if text:
            line += 1
            blob = TextBlob(text, analyzer=NaiveBayesAnalyzer())
            pos = blob.sentiment.p_pos
            neg = blob.sentiment.p_neg
            avg = pos - neg
            if avg < 0.2:
                rating = 1
            elif 0.2 < avg < 0.4:
                rating = 2
            elif 0.4 < avg < 0.6:
                rating = 3
            elif 0.6 < avg < 0.8:
                rating = 4
            elif avg > 0.8:
                rating = 5
        if stars == rating:
            match = 'MATCH'
            match_cnt += 1
        elif abs(stars - rating) == 1:
            match = 'MATCH'
            match_cnt += 1
        else:
            match = "UNMATCH"

        obj = Business(business_id, stars, rating)
        ratings_file.write(json.dumps(vars(obj)))
        ratings_file.write("\n")

        if line%25 == 0:
            print "Completed: "+str(line)

        # print "Sentiment Score: " + business_id + " - " + str(stars) + " - " + str(rating) + " - " + str(pos) \
        #       + " - " + str(neg) + " - " + str(avg) + " - " + match

    match_per = (match_cnt / line) * 100
    print "Match Percentage: "+str(match_per)


def main():
    """
    Call the get_reviews function to calculate the score for n number of records
    :return: none
    """
    for i in range(1000,8000,1000):
        get_reviews(i)


main()